from services.news_service import get_latest_news
from services.translator import translate_text
from utils.constants import CATEGORIES

async def news(update, context):
    args = context.args
    category = args[0] if len(args) > 0 else "technology"
    language = args[1] if len(args) > 1 else "ru"

    if category not in CATEGORIES:
        await update.message.reply_text(
            "‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /categories –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π."
        )
        return

    news_list = get_latest_news(category)
    if not news_list:
        await update.message.reply_text("‚ùå –ù–æ–≤–æ—Å—Ç–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    for news_item in news_list:
        translated_title = translate_text(news_item["title"], dest_language=language)
        message_text = (
            f"üì∞ *{translated_title}*\n\n"
            f"üîó [–ß–∏—Ç–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ]({news_item['url']})"
        )
        if news_item["image"]:
            await update.message.reply_photo(news_item["image"], caption=message_text, parse_mode="Markdown")
        else:
            await update.message.reply_text(message_text, parse_mode="Markdown")
